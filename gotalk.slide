Moving from Java to go
19 Jan 2017
Tags: java, go

Akhilesh Kumar Singh
Myntra
akhilesh.singh@myntra.com

* Go differs with Java in several ways:

- Programs compile to machine code. There's no VM.
- Built-in concurrency
- Golang has interfaces and structs. But they are not really classes.
- No exception
- No inheritance
- No class
- No constructor

* Is Go an object-oriented language?
- Yes and No
- Go has types and methods
- No type hierarchy
- Interface in Go provides a different approach
- No class keyword, struct is what you would use for a parallel concept in Go
- Methods are associated with a struct not within

* Structs
- Struct name cannot have special characters or start with number
- Can contain fields
- Can not extend other structs
- Can not contain methods
- Zero-ed initialized
- No public, private, package, protected keyword
- If the first letter is capital, it is visible outside the package

* Example: Class in Java
Partial code: In Java

    class Rectangle {

        private Integer length;
        private Integer width;

        public Rectangle(Integer length, Integer width) {
            this.length = length;
            this.width = width;
        }

        public Integer getArea() {  //method defined within class
            return (this.length)*(this.width);
        }

    }

* Example: Struct in Go
Partial code: In Go

    type Rectangle struct {
        length, width int
    }
    func NewRectangle(l, w int) *Rectangle {
        r := new(Rectangle)
        r.length = l
        r.width = w
        return r
    }
    func (r Rectangle) GetArea() int {
    	return r.length*r.width
    }
    func main() {
    	r := NewRectangle(3, 4)
    	fmt.Println(r, r.GetArea()) // &{3 4} 12
    }

* Example: Struct
Method are bound to the base type and not T or *T

    type Rectangle struct {
        length, width int
        name string
    }
    func (r Rectangle) GetArea() int { // pass by value
        return r.length*r.width
    }
    // func (r *Rectangle) GetArea() int { // pass by reference
    //     return r.length*r.width
    // }
    func main() {
        r := Rectangle{}
        fmt.Println("Default rectangle is: ", r) //Default rectangle is: {0 0 }

        r1 := Rectangle{2, 1, "my_r1"} //initialize values in order they are defined in struct
        fmt.Println("Rectangle r1 is: ", r1) // Rectangle r1 is:  {2 1 my_r1}

        r2 := Rectangle{width:3, name:"my_r2", length:4} //initialize values by variable name in any order
        fmt.Println("Rectangle r2 is: ", r2) // Rectangle r2 is:  {4 3 my_r2}
    }

* Composition Over Inheritance

Object Composition (has-a)

    type Person struct {
        Name string
        Address Address
    }

    type Address struct {
        Number string
        Street string
    }

    func (p *Person) Talk() {
        fmt.Println("Hi, my name is", p.Name)
    }

* Composition Over Inheritance: Anonymous fields in structs

Embedded Types (is-a)

    type Citizen struct {
       Country string
       Person
    }

    func main() {
        c := Citizen{}
        c.Name = "Steve"
        c.Country = "America"
        c.Talk()
    }

    c.Person.Name
    c.Person.Talk()

* Interfaces in Go
Partial Code: In Java

    public class Rectangle implements Shaper { //implementation here }
Partial Code: In Go

    type Shaper interface {
       Area() int
    }

    type Rectangle struct {
       length, width int
    }

    func (r Rectangle) Area() int {
       return r.length * r.width
    }

    func main() {
       r := Rectangle{length:5, width:3}
       s := Shaper(r)
       fmt.Printf("Rectangle area: %d, Area of shape: %s", r.Area(), s.Area()) // Rectangle r's area is: 15
    }

* There Are Errors, No Exceptions. Panic!

* Error
    func getSession(id string) (string, error) {
        // implementation
    }

    response, err := getSession("SS1234")
    if err != nil {
        // handle the error
        return err
    }

* No finally, defer instead

* Panic Recover
- Go does not have exceptions but you can create something on the line with panic and recover

    defer func() {
        if r := recover(); r != nil {
            fmt.Println("Recovered in f", r)
        }
    }()

    panic(4)

- This is highly not recommended to be used in place of java exception
- It can be used to catch unexpected panic

* Our Experience

Partial code: In Java

    @Path("/username")

- Java @Path annotation accepts trailing slash
- Golang it depends on router to router

Partial code: In Java

    @Consumes({ "application/json" })

- Java accepts both "application/json" and "application/json; charset=utf-8"

* Logging
- log package is slow
- [[https://github.com/golang/glog][glog]] to rescue
- [[https://github.com/akhilesh18992/glog][configurable-glog]]



